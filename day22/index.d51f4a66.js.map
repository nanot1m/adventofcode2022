{"mappings":"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","sources":["src/day22/index.js","../js/solutions/22.js"],"sourcesContent":["// @ts-check\n\nimport { scaleCanvasToPixelRatio } from \"../common\"\nimport { V } from \"../../../js/modules\"\nimport { range } from \"../../../js/modules/itertools\"\nimport {\n  parseInput,\n  getConnectionsOnCube,\n  traverseMap,\n} from \"../../../js/solutions/22\"\n\nconst canvas = document.getElementById(\"canvas\")\nif (!(canvas instanceof HTMLCanvasElement)) throw new Error(\"no canvas\")\n\nconst ctx = canvas.getContext(\"2d\")\nif (!ctx) throw new Error(\"no ctx\")\n\nconst WIDTH = 200\nconst HEIGHT = 200\nconst SIZE = 3\n\nscaleCanvasToPixelRatio(ctx, WIDTH * SIZE, HEIGHT * SIZE)\n\nconst inputForm = document.getElementById(\"input-form\")\nif (!(inputForm instanceof HTMLFormElement)) throw new Error(\"no form\")\n\nconst nextButton = document.getElementById(\"next\")\n\ninputForm.addEventListener(\"submit\", function (e) {\n  e.preventDefault()\n  const formData = new FormData(this)\n  const input = formData.get(\"input\")?.toString() ?? \"\"\n  draw(input.trimEnd(), ctx)\n})\n\nconst colors = {\n  \".\": \"white\",\n  \"#\": \"orange\",\n}\n\nconst dirToChar = {\n  D: \"↑\",\n  U: \"↓\",\n  L: \"←\",\n  R: \"→\",\n}\n\nlet rafHandle = 0\n/**\n * @param {string} input\n * @param {CanvasRenderingContext2D} ctx\n */\nfunction draw(input, ctx) {\n  if (rafHandle) {\n    cancelAnimationFrame(rafHandle)\n  }\n  ctx.canvas.scrollIntoView({ behavior: \"smooth\" })\n\n  const { map, moves, start, sideSize } = parseInput(input)\n  const connections = getConnectionsOnCube(sideSize)\n\n  const iter = traverseMap(map, moves, connections, start, true)\n\n  if (!nextButton) {\n    throw new Error(\"no next button\")\n  }\n  nextButton.onclick = () => {\n    const result = iter.next()\n    if (result.done) {\n      return\n    }\n    const { dir, pos, move } = result.value\n    console.log({ pos })\n    drawPos(pos, dir)\n\n    // @ts-ignore\n    document.getElementById(\n      \"status\",\n    ).innerText = `Move: ${move}, Dir: ${dirToChar[dir]}`\n  }\n\n  nextButton.removeAttribute(\"disabled\")\n\n  ctx.fillStyle = \"black\"\n  ctx.fillRect(0, 0, WIDTH * SIZE, HEIGHT * SIZE)\n\n  function drawPos(pos, dir) {\n    ctx.fillStyle = \"red\"\n    ctx.fillRect(pos[0] * SIZE, pos[1] * SIZE, SIZE, SIZE)\n  }\n\n  function drawInitState() {\n    for (const p of map) {\n      ctx.fillStyle = colors[p.value] ?? \"white\"\n      ctx.fillRect(p.pos[0] * SIZE, p.pos[1] * SIZE, SIZE, SIZE)\n    }\n    drawPos(start, \"R\")\n  }\n\n  drawInitState()\n\n  function drawLoop() {\n    const result = iter.next()\n    if (result.done) {\n      return\n    }\n    const { dir, pos, move } = result.value\n    drawPos(pos, dir)\n\n    // @ts-ignore\n    document.getElementById(\n      \"status\",\n    ).innerText = `Move: ${move}, Dir: ${dirToChar[dir]}`\n    rafHandle = requestAnimationFrame(drawLoop)\n  }\n  drawLoop()\n}\n","// @ts-check\n\nimport { V, V3 } from \"../modules/index.js\"\nimport { it, range } from \"../modules/itertools.js\"\nimport {\n  mulMatrices,\n  readBlocks,\n  readLines,\n  rotateStrings2d,\n} from \"../modules/lib.js\"\nimport { Map2d } from \"../modules/map2d.js\"\nimport { asDir, DIR_TO_VEC } from \"../modules/vec.js\"\n\n/** @type {import('../modules/types.js').SolutionModuleValid<typeof import('./22.js')>} */\nconst __MODULE_VALID__ = true\n\nexport const useExample = false\n\nexport const exampleInput = `\\\n        ...#\n        .#..\n        #...\n        ....\n...#.......#\n........#...\n..#....#....\n..........#.\n        ...#....\n        .....#..\n        .#......\n        ......#.\n\n10R5L5R10L4R5L5`\n\n/** @typedef {ReturnType<typeof parseInput>} InputType */\n\nexport const parseInput = (/** @type {string} */ input) => {\n  const [mapStr, movesStr] = readBlocks(input)\n  const lines = readLines(mapStr)\n\n  let sideSize = Infinity\n  for (const line of lines) {\n    const trimmed = line.trim()\n    const width = line.length - trimmed.length\n    if (width === 0) continue\n    sideSize = Math.min(sideSize, width)\n  }\n\n  /** @type {Map2d<string>} */\n  const map = new Map2d()\n  for (let y = 0; y < lines.length; y++) {\n    for (let x = 0; x < lines[y].length; x++) {\n      if (lines[y][x] !== \" \") {\n        map.set(V.vec(x, y), lines[y][x])\n      }\n    }\n  }\n\n  const start = it(map)\n    .filter((x) => x.value === \".\")\n    .toArray()\n    .sort((a, b) => a.pos[1] - b.pos[1] || a.pos[0] - b.pos[0])[0].pos\n\n  /** @type {string[]} */\n  const moves = []\n  let cur = \"\"\n  for (let c of movesStr) {\n    if (c === \"L\" || c === \"R\") {\n      if (cur) moves.push(cur, c)\n      cur = \"\"\n    } else {\n      cur += c\n    }\n  }\n  moves.push(cur)\n\n  return {\n    map,\n    start,\n    moves,\n    sideSize,\n  }\n}\n\n/**\n *\n * @param {Map2d<string>} map\n */\nfunction getConnectionsOnPlane(map) {\n  /** @type {Map2d<Record<V.Dir, V.Vec2>>} */\n  const connections = new Map2d()\n\n  for (const { pos } of map) {\n    const connection = /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    const up = map.get(V.add(pos, DIR_TO_VEC.U))\n\n    if (up == null) {\n      const nextPos = it(map)\n        .filter((x) => V.x(x.pos) === V.x(pos))\n        .toArray()\n        .sort((a, b) => V.y(a.pos) - V.y(b.pos))[0]\n      connection.U = nextPos.pos\n    }\n\n    const down = map.get(V.add(pos, DIR_TO_VEC.D))\n    if (down == null) {\n      const nextPos = it(map)\n        .filter((x) => V.x(x.pos) === V.x(pos))\n        .toArray()\n        .sort((a, b) => V.y(b.pos) - V.y(a.pos))[0]\n      connection.D = nextPos.pos\n    }\n\n    const left = map.get(V.add(pos, DIR_TO_VEC.L))\n    if (left == null) {\n      const nextPos = it(map)\n        .filter((x) => V.y(x.pos) === V.y(pos))\n        .toArray()\n        .sort((a, b) => V.x(b.pos) - V.x(a.pos))[0]\n      connection.L = nextPos.pos\n    }\n\n    const right = map.get(V.add(pos, DIR_TO_VEC.R))\n    if (right == null) {\n      const nextPos = it(map)\n        .filter((x) => V.y(x.pos) === V.y(pos))\n        .toArray()\n        .sort((a, b) => V.x(a.pos) - V.x(b.pos))[0]\n      connection.R = nextPos.pos\n    }\n\n    connections.set(pos, connection)\n  }\n  return connections\n}\n\nconst DIRS = [asDir(\"D\"), asDir(\"R\"), asDir(\"U\"), asDir(\"L\")]\n\nconst scores = {\n  [asDir(\"R\")]: 0,\n  [asDir(\"D\")]: 1,\n  [asDir(\"L\")]: 2,\n  [asDir(\"U\")]: 3,\n}\n\n/**\n *\n * @param {Map2d<string>} map\n * @param {string[]} moves\n * @param {Map2d<Record<V.Dir, V.Vec2>>} connections\n * @param {V.Vec2} start\n */\nexport function* traverseMap(map, moves, connections, start, onCube = false) {\n  let pos = start\n  let dirIdx = 1\n  const visited = new Map2d()\n\n  /**\n   * @param {V.Vec2} pos\n   * @param {V.Dir} dir\n   */\n  function stepFromPosInDir(pos, dir) {\n    let nextPos = V.add(pos, DIR_TO_VEC[dir])\n    const value = map.get(nextPos)\n    if (value === \".\") {\n      pos = nextPos\n      visited.set(pos, dir)\n      return { pos, ok: true, dir }\n    }\n    if (value === \"#\") {\n      return { pos, ok: false, dir }\n    }\n    const connection = connections.get(pos)\n    if (connection == null) {\n      throw new Error(\"no connection at pos \" + pos.join(\",\") + \" dir \" + dir)\n    }\n    if (connection[dir] == null) {\n      throw new Error(\n        \"Connection at pos \" + pos.join(\",\") + \" dir \" + dir + \" is null\",\n      )\n    }\n    if (map.get(connection[dir]) === \"#\") {\n      return { pos, ok: false, dir }\n    }\n    nextPos = connection[dir]\n    if (onCube) {\n      if (dir === \"L\" && V.x(pos) === 50 && V.y(pos) < 50) {\n        dir = \"R\" // from face 1 left to face 5, continue to move right\n      } else if (dir === \"L\" && V.x(pos) === 50) {\n        dir = \"U\" // from face 3 left to face 5, continue to move up\n      } else if (dir === \"L\" && V.x(pos) === 0 && V.y(pos) < 150) {\n        dir = \"R\" // from face 5 left to face 1, continue to move right\n      } else if (dir === \"L\" && V.x(pos) === 0) {\n        dir = \"U\" // from face 6 left to face 1, continue to move up\n      } else if (dir === \"U\" && V.y(pos) === 149) {\n        dir = \"L\" // from face 4 up to face 6, continue to move left\n      } else if (dir === \"U\" && V.y(pos) === 49) {\n        dir = \"L\" // from face 2 up to face 3, continue to move left\n      } else if (dir === \"U\" && V.y(pos) === 199) {\n        dir = \"U\" // from face 6 up to face 2, continue to move up\n      } else if (dir === \"D\" && V.y(pos) === 0 && V.x(pos) < 100) {\n        dir = \"R\" // from face 1 down to face 6, continue to move right\n      } else if (dir === \"D\" && V.y(pos) === 0) {\n        dir = \"D\" // from face 2 down to face 6, continue to move down\n      } else if (dir === \"D\" && V.y(pos) === 100) {\n        dir = \"R\" // from face 5 down to face 3, continue to move right\n      } else if (dir === \"R\" && V.x(pos) === 149) {\n        dir = \"L\" // from face 2 right to face 4, continue to move left\n      } else if (dir === \"R\" && V.x(pos) === 99 && V.y(pos) < 100) {\n        dir = \"D\" // from face 3 right to face 2, continue to move down\n      } else if (dir === \"R\" && V.x(pos) === 99) {\n        dir = \"L\" // from face 4 right to face 2, continue to move left\n      } else if (dir === \"R\" && V.x(pos) === 49) {\n        dir = \"D\" // from face 6 right to face 4, continue to move down\n      }\n    }\n\n    visited.set(pos, dir)\n    return { pos: nextPos, ok: true, dir }\n  }\n\n  /**\n   *\n   * @param {V.Dir} prevDir\n   * @param {V.Vec2} prevPos\n   * @param {V.Dir} nextDir\n   * @param {V.Vec2} nextPos\n   */\n  function assertPlaneSwitch(prevDir, prevPos, nextDir, nextPos) {\n    /** @type {Partial<Record<V.Dir, V.Dir>>} */\n    const counterDirs = { U: \"D\", D: \"U\", L: \"R\", R: \"L\" }\n    const result = stepFromPosInDir(nextPos, counterDirs[nextDir])\n    if (!result.ok) {\n      throw new Error(\"Plane switch failed. Expected to go back to \" + nextPos)\n    }\n    if (result.pos.join(\",\") !== prevPos.join(\",\")) {\n      throw new Error(\n        `Plane switch from ${prevDir} at ${prevPos.join(\n          \",\",\n        )} to ${nextDir} at ${nextPos.join(\n          \",\",\n        )} failed. Expected to go back to ${prevPos.join(\n          \",\",\n        )} but got ${result.pos.join(\",\")}`,\n      )\n    }\n  }\n\n  for (const move of moves) {\n    const num = Number(move)\n    if (isNaN(num)) {\n      dirIdx += move === \"L\" ? -1 : 1\n      dirIdx = (dirIdx + 4) % 4\n      yield {\n        pos,\n        dir: DIRS[dirIdx],\n        visited,\n        move,\n      }\n      continue\n    }\n\n    let dir = DIRS[dirIdx]\n    for (let i = 0; i < num; i++) {\n      const result = stepFromPosInDir(pos, dir)\n      if (!result.ok) {\n        break\n      }\n      assertPlaneSwitch(dir, pos, result.dir, result.pos)\n      pos = result.pos\n      dir = result.dir\n      dirIdx = DIRS.indexOf(dir)\n      yield {\n        pos,\n        dir,\n        visited,\n        move,\n      }\n    }\n  }\n}\n\n/**\n * @param {InputType} input\n */\nexport function part1({ map, moves, start }) {\n  const connections = getConnectionsOnPlane(map)\n  let { pos, dir } = it(traverseMap(map, moves, connections, start)).last()\n  pos = V.add(pos, V.vec(1, 1))\n  return V.y(pos) * 1000 + V.x(pos) * 4 + scores[dir]\n}\n\n/**\n * @param {number} sideSize\n */\nexport function getConnectionsOnCube(sideSize) {\n  /** @type {Map2d<Record<V.Dir, V.Vec2>>} */\n  const connections = new Map2d()\n\n  // face 1 top\n  // face 6 left\n  for (const d of range(sideSize)) {\n    const pos1 = V.vec(sideSize + d, 0)\n    const connection1 =\n      connections.get(pos1) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    const pos6 = V.vec(0, sideSize * 3 + d)\n    const connection6 =\n      connections.get(pos6) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    connection1.D = pos6\n    connection6.L = pos1\n    connections.set(pos1, connection1)\n    connections.set(pos6, connection6)\n  }\n\n  // face 2 top\n  // face 6 bottom\n  for (const d of range(sideSize)) {\n    const pos2 = V.vec(sideSize * 2 + d, 0)\n    const connection2 =\n      connections.get(pos2) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    const pos6 = V.vec(d, sideSize * 4 - 1)\n    const connection6 =\n      connections.get(pos6) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    connection2.D = pos6\n    connection6.U = pos2\n    connections.set(pos2, connection2)\n    connections.set(pos6, connection6)\n  }\n\n  // face 2 right\n  // face 4 right\n  for (const d of range(sideSize)) {\n    const pos2 = V.vec(sideSize * 3 - 1, d)\n    const connection2 =\n      connections.get(pos2) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    const pos4 = V.vec(sideSize * 2 - 1, sideSize * 3 - d - 1)\n    const connection4 =\n      connections.get(pos4) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    connection2.R = pos4\n    connection4.R = pos2\n    connections.set(pos2, connection2)\n    connections.set(pos4, connection4)\n  }\n\n  // face 2 bottom\n  // face 3 right\n  for (const d of range(sideSize)) {\n    const pos2 = V.vec(sideSize * 2 + d, sideSize - 1)\n    const connection2 =\n      connections.get(pos2) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    const pos3 = V.vec(sideSize * 2 - 1, sideSize + d)\n    const connection3 =\n      connections.get(pos3) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    connection2.U = pos3\n    connection3.R = pos2\n    connections.set(pos2, connection2)\n    connections.set(pos3, connection3)\n  }\n\n  // face 4 bottom\n  // face 6 right\n  for (const d of range(sideSize)) {\n    const pos4 = V.vec(sideSize + d, sideSize * 3 - 1)\n    const pos6 = V.vec(sideSize - 1, sideSize * 3 + d)\n    const connection4 =\n      connections.get(pos4) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    const connection6 =\n      connections.get(pos6) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    connection4.U = pos6\n    connection6.R = pos4\n    connections.set(pos4, connection4)\n    connections.set(pos6, connection6)\n  }\n\n  // face 5 left\n  // face 1 left\n  for (const d of range(sideSize)) {\n    const pos5 = V.vec(0, sideSize * 2 + d)\n    const pos1 = V.vec(sideSize, sideSize - d - 1)\n    const connection5 =\n      connections.get(pos5) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    const connection1 =\n      connections.get(pos1) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    connection5.L = pos1\n    connection1.L = pos5\n    connections.set(pos5, connection5)\n    connections.set(pos1, connection1)\n  }\n\n  // face 5 top\n  // face 3 left\n  for (const d of range(sideSize)) {\n    const pos5 = V.vec(d, sideSize * 2)\n    const pos3 = V.vec(sideSize, sideSize + d)\n    const connection5 =\n      connections.get(pos5) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    const connection3 =\n      connections.get(pos3) ?? /** @type {Record<V.Dir, V.Vec2>} */ ({})\n    connection5.D = pos3\n    connection3.L = pos5\n    connections.set(pos5, connection5)\n    connections.set(pos3, connection3)\n  }\n\n  return connections\n}\n\n/**\n * @param {InputType} input\n */\nexport function part2({ map, moves, start, sideSize }) {\n  const connections = getConnectionsOnCube(sideSize)\n  let { pos, dir } = it(\n    traverseMap(map, moves, connections, start, true),\n  ).last()\n\n  pos = V.add(pos, V.vec(1, 1))\n  return V.y(pos) * 1000 + V.x(pos) * 4 + scores[dir]\n}\n"],"names":["$7zFg5","parcelRequire","$idVGl","$96f5e5413a380fe5$export$20bebb8aee8dd3f5","input","mapStr","movesStr","$1CMLe","readBlocks","lines","readLines","sideSize","Infinity","line","trimmed","trim","width","length","Math","min","map","$jOfNW","Map2d","y","x","set","V","vec","start","$c04jy","it","filter","value","toArray","sort","a","b","pos","moves","cur","c","push","$96f5e5413a380fe5$var$DIRS","$hyM6K","asDir","$96f5e5413a380fe5$export$716ff34398d46ffc","connections","onCube","dirIdx","visited","stepFromPosInDir","dir","nextPos","add","DIR_TO_VEC","get","ok","connection","Error","join","assertPlaneSwitch","prevDir","prevPos","nextDir","result","U","D","L","R","move","num","Number","isNaN","i","indexOf","$96f5e5413a380fe5$export$a4a1cbc130dc5ab4","d","range","pos1","connection1","pos6","connection6","d1","pos2","connection2","pos61","connection61","d2","pos21","connection21","pos4","connection4","d3","pos22","connection22","pos3","connection3","d4","pos41","pos62","connection41","connection62","d5","pos5","pos11","connection5","connection11","d6","pos51","pos31","connection51","connection31","$032b6efe189e468a$var$canvas","document","getElementById","HTMLCanvasElement","$032b6efe189e468a$var$ctx","getContext","scaleCanvasToPixelRatio","$032b6efe189e468a$var$WIDTH","$032b6efe189e468a$var$HEIGHT","$032b6efe189e468a$var$inputForm","HTMLFormElement","$032b6efe189e468a$var$nextButton","addEventListener","e","preventDefault","ctx","$032b6efe189e468a$var$rafHandle","cancelAnimationFrame","canvas","scrollIntoView","behavior","iter","drawPos","fillStyle","fillRect","drawInitState","p","$032b6efe189e468a$var$colors","drawLoop","next","done","innerText","$032b6efe189e468a$var$dirToChar","requestAnimationFrame","onclick","console","log","removeAttribute","$032b6efe189e468a$var$draw","FormData","this","toString","trimEnd"],"version":3,"file":"index.d51f4a66.js.map"}