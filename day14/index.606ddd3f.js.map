{"mappings":"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","sources":["../js/solutions/14.js","src/day14/index.js"],"sourcesContent":["// @ts-check\n\nimport { V } from \"../modules/index.js\"\nimport { it } from \"../modules/itertools.js\"\nimport { readLines, tuple, typed } from \"../modules/lib.js\"\nimport { Map2d } from \"../modules/map2d.js\"\n\n/**\n * @param {string} input\n * @returns\n */\nexport function solve(input) {\n  return [() => part1(input), () => part2(input)]\n}\n\nconst start = V.vec(500, 0)\n\n/**\n * @param {string} input\n * @returns\n */\nexport function parseMap(input) {\n  const lines = readLines(input.trimEnd()).map(typed(\"vec[]\"))\n\n  const points = it(lines)\n    .flatMap((line) =>\n      it(line)\n        .windowed(2)\n        .flatMap(([a, b]) => V.segment(a, b)),\n    )\n    .map((pos) => tuple(pos, \"#\"))\n\n  return new Map2d(points).set(start, \"+\")\n}\n\n/**\n * @param {Map2d<string>} map2d\n */\nexport function* simulateSand(map2d, maxY = map2d.bounds.maxY) {\n  const bot = V.vec(0, 1)\n  const leftBot = V.vec(-1, 1)\n  const rightBot = V.vec(1, 1)\n\n  /**\n   *\n   * @param {V.Vec2} startFrom\n   * @returns\n   */\n  function drop(startFrom) {\n    let pos = startFrom\n    while (true) {\n      if (V.y(pos) >= maxY) {\n        return null\n      }\n\n      const bottom = V.add(pos, bot)\n      if (map2d.hasPos(bottom) === false) {\n        pos = bottom\n        continue\n      }\n\n      const lb = V.add(pos, leftBot)\n      if (map2d.hasPos(lb) === false) {\n        pos = lb\n        continue\n      }\n\n      const rb = V.add(pos, rightBot)\n      if (map2d.hasPos(rb) === false) {\n        pos = rb\n        continue\n      }\n\n      return pos\n    }\n  }\n\n  while (true) {\n    const pos = drop(start)\n    if (pos === null || V.eq(pos, start)) {\n      return\n    }\n    map2d.set(pos, \"o\")\n    yield pos\n  }\n}\n\n/**\n * @param {string} input\n */\nfunction part1(input) {\n  const map2d = parseMap(input)\n\n  return it(simulateSand(map2d)).count()\n}\n\n/**\n * @param {string} input\n */\nfunction part2(input) {\n  const map = parseMap(input)\n\n  const bfs = map\n    .setGetNeighbors((pos) => V.DIRS_3_TOP.map((d) => V.add(pos, d)))\n    .bfs((_, b) => !map.hasPos(b.pos) && b.pos[1] < map.height + 2, start)\n\n  return it(bfs).count()\n}\n","// @ts-check\nimport { parseMap, simulateSand } from \"../../../js/solutions/14.js\"\nimport { V } from \"../../../js/modules/index.js\"\nimport { scaleCanvasToPixelRatio } from \"../common.js\"\n\nconst canvas = document.getElementById(\"canvas\")\nif (!(canvas instanceof HTMLCanvasElement)) throw new Error(\"no canvas\")\n\nconst ctx = canvas.getContext(\"2d\")\nif (!ctx) throw new Error(\"no ctx\")\n\nscaleCanvasToPixelRatio(ctx, 100, 100)\n\nlet raf = 0\n/**\n * @param {string} input\n * @param {CanvasRenderingContext2D} ctx\n */\nfunction draw(input, ctx, part2 = false) {\n  cancelAnimationFrame(raf)\n  const map = parseMap(input)\n\n  if (part2) {\n    const h = map.height + 1\n    const minX = Math.min(map.bounds.minX, 500 - h)\n    const maxX = Math.max(map.bounds.maxX, 500 + h)\n\n    const floor = V.segment(V.vec(minX, h), V.vec(maxX, h))\n    for (const pos of floor) {\n      map.set(pos, \"~\")\n    }\n  }\n\n  const { width, height, bounds } = map\n  const scale = Math.min(10, Math.max(2, 200 / width))\n\n  scaleCanvasToPixelRatio(ctx, width * scale, height * scale)\n\n  ctx.canvas.scrollIntoView({ behavior: \"smooth\" })\n\n  const colors = {\n    \"+\": \"orange\",\n    o: \"orange\",\n    \"#\": \"gray\",\n    \".\": \"darkblue\",\n    \"~\": \"brown\",\n  }\n\n  const iter = simulateSand(map)\n\n  function drawFullState() {\n    const map2dStr = map.to2dArray({ valToString: (x) => x ?? \".\" })\n\n    map2dStr.forEach((row, y) => {\n      row.forEach((cell, x) => {\n        ctx.fillStyle = colors[cell]\n        ctx.fillRect(x * scale, y * scale, scale, scale)\n      })\n    })\n  }\n\n  function drawPoint([x, y], color) {\n    ctx.fillStyle = color\n    ctx.fillRect(\n      (x - bounds.minX) * scale,\n      (y - bounds.minY) * scale,\n      scale,\n      scale,\n    )\n  }\n\n  drawFullState()\n\n  const step = () => {\n    const value = iter.next().value\n    if (value) {\n      drawPoint(value, colors.o)\n      raf = requestAnimationFrame(step)\n    }\n  }\n\n  step()\n}\n\nconst inputForm = document.getElementById(\"input-form\")\nif (!(inputForm instanceof HTMLFormElement)) throw new Error(\"no form\")\n\ninputForm.addEventListener(\"submit\", function (e) {\n  e.preventDefault()\n  const formData = new FormData(this)\n  const input = formData.get(\"input\")?.toString() ?? \"\"\n  draw(input.trim(), ctx, formData.get(\"part2\") === \"on\")\n})\n"],"names":["$idVGl","parcelRequire","$95eec2febb685d71$var$start","V","vec","$95eec2febb685d71$export$7f923f14f62d79c","input","lines","$1CMLe","readLines","trimEnd","map","typed","points","$c04jy","it","flatMap","line","windowed","a","b","segment","pos","tuple","$jOfNW","Map2d","set","$95eec2febb685d71$export$c441dd7fbb1814ca","map2d","maxY","bounds","bot","leftBot","rightBot","drop","startFrom","y","bottom","add","hasPos","lb","rb","eq","$8a82902540089ab9$var$canvas","document","getElementById","HTMLCanvasElement","Error","$8a82902540089ab9$var$ctx","getContext","$7zFg5","scaleCanvasToPixelRatio","$8a82902540089ab9$var$raf","$8a82902540089ab9$var$draw","ctx","part2","cancelAnimationFrame","h","height","minX","Math","min","maxX","max","floor","width","scale","canvas","scrollIntoView","behavior","colors","o","iter","to2dArray","valToString","x","forEach","row","cell","fillStyle","fillRect","step","value","next","color","minY","drawPoint","requestAnimationFrame","$8a82902540089ab9$var$inputForm","HTMLFormElement","addEventListener","e","preventDefault","formData","FormData","this","get","toString","trim"],"version":3,"file":"index.606ddd3f.js.map"}