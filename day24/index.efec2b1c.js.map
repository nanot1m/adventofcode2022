{"mappings":"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","sources":["node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/runtime-dc20c24c112720dc.js","src/day24/index.js","../js/solutions/24.js","node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/runtime-3d5f761be1530b04.js","node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/runtime-2816e6a9ae788949.js","node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/runtime-972ae5216055aaed.js","node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/runtime-2f5a75ea84a2e8e9.js","node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/runtime-464df1a2920266f6.js","node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/runtime-c0a19c76a38b0d03.js","node_modules/.pnpm/@parcel+runtime-js@2.8.1_@parcel+core@2.8.1/node_modules/@parcel/runtime-js/lib/runtime-48b13e96fe38e7c5.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"2xBmn\\\":\\\"index.efec2b1c.js\\\",\\\"2dmi2\\\":\\\"grass.d15b078f.png\\\",\\\"gGxKH\\\":\\\"wall-v.5e4cbb6f.png\\\",\\\"8i50T\\\":\\\"wall-h.1d5b6cad.png\\\",\\\"iPk1y\\\":\\\"wall-tl.b6d54d5a.png\\\",\\\"a1aok\\\":\\\"wall-tr.757e7329.png\\\",\\\"390yF\\\":\\\"wall-bl.86040f9e.png\\\",\\\"jrZHa\\\":\\\"wall-br.727813ea.png\\\",\\\"iSdbY\\\":\\\"index.64bca685.js\\\"}\"));","import { scaleCanvasToPixelRatio } from \"../common\"\nimport { checks, parseInput, prepareMapForDraw } from \"../../../js/solutions/24\"\nimport { parseMap2d, Map2d } from \"../../../js/modules/map2d\"\n\nimport grass from \"./img/grass.png\"\nimport wallV from \"./img/wall-v.png\"\nimport wallH from \"./img/wall-h.png\"\nimport wallTL from \"./img/wall-tl.png\"\nimport wallTR from \"./img/wall-tr.png\"\nimport wallBL from \"./img/wall-bl.png\"\nimport wallBR from \"./img/wall-br.png\"\nimport { V } from \"../../../js/modules\"\n\nconst example = `#.######\n#>>.<^<#\n#.<..<<#\n#>v.><>#\n#<^v^^>#\n######.#`\n\nconst canvas = document.getElementById(\"canvas\")\n/** @type {CanvasRenderingContext2D} */\nconst ctx = canvas.getContext(\"2d\")\n\nconst form = document.getElementById(\"input-form\")\nconst inputElement = document.getElementById(\"input\")\ninputElement.value = example\n\nconst controls = document.querySelector(\".controls\")\n\nform.addEventListener(\"submit\", function (e) {\n  e.preventDefault()\n  const formData = new FormData(this)\n  const input = formData.get(\"input\")?.toString() ?? \"\"\n  startLevel(input.trim())\n})\n\nconst tileSize = 10\nlet scale = 4\nconst padding = 4\n\nconst colors = {\n  bg: \"#1e130a\",\n  blizzard: \"#4dabf7\",\n}\n\nfunction drawElf(pos) {\n  drawChar(pos, \"🧌\", \"green\", false)\n}\n\nfunction drawElf2(pos) {\n  drawChar(pos, \"🧝‍♂️\", \"green\", false)\n}\n\nfunction drawChar(pos, char, color = \"white\", clear = true) {\n  ctx.font = tileSize * scale + \"px monospace\"\n  ctx.textAlign = \"center\"\n  ctx.textBaseline = \"middle\"\n  const size = tileSize * scale\n  if (clear) {\n    ctx.fillStyle = colors.bg\n    ctx.fillRect(pos[0] * size, pos[1] * size, size, size)\n  }\n  ctx.fillStyle = color\n  ctx.fillText(char, pos[0] * size + size / 2, pos[1] * size + size / 2)\n}\n\nfunction drawSprite(pos, sprite) {\n  ctx.imageSmoothingEnabled = false\n  ctx.drawImage(\n    sprite,\n    0,\n    0,\n    tileSize,\n    tileSize,\n    pos[0] * tileSize * scale,\n    pos[1] * tileSize * scale,\n    tileSize * scale,\n    tileSize * scale,\n  )\n}\n\nfunction loadSprite(path) {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.onload = () => resolve(img)\n    img.onerror = reject\n    img.src = path\n  })\n}\n\nasync function loadSprites() {\n  const sprites = await Promise.all([\n    loadSprite(grass),\n    loadSprite(wallV),\n    loadSprite(wallH),\n    loadSprite(wallTL),\n    loadSprite(wallTR),\n    loadSprite(wallBL),\n    loadSprite(wallBR),\n  ])\n  return {\n    grass: sprites[0],\n    wallV: sprites[1],\n    wallH: sprites[2],\n    wallTL: sprites[3],\n    wallTR: sprites[4],\n    wallBL: sprites[5],\n    wallBR: sprites[6],\n  }\n}\n\nfunction delay(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nasync function startLevel(level) {\n  const map = parseInput(level)\n  const width = (map.width + 2) * tileSize + padding * 2\n  const height = (map.height + 2) * tileSize + padding * 2\n\n  const screenWidth = window.innerWidth\n  const maxScale = Math.max(Math.min(Math.floor(screenWidth / width), 4), 1)\n  console.log(\"maxScale\", maxScale)\n  scale = maxScale\n\n  scaleCanvasToPixelRatio(ctx, width, height, scale)\n  ctx.fillStyle = colors.bg\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n  ctx.translate(padding * scale, padding * scale)\n\n  const message = \"Loading...\"\n  let timePassed = Date.now()\n  for (let i = 0; i < message.length; i++) {\n    drawChar([i, 1], message[i], \"white\")\n  }\n  const sprites = await loadSprites()\n  timePassed = Date.now() - timePassed\n  if (timePassed < 1000) {\n    await delay(1000 - timePassed)\n  }\n\n  ctx.fillStyle = colors.bg\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n  let playerPos = [0, -1]\n  let time = 0\n  let lost = false\n  let won = false\n\n  drawLevel(map, time)\n  setButtonsState()\n\n  function drawLevel(map, time) {\n    let drawMap = new Map2d()\n    for (let i = -1; i <= map.width; i++) {\n      drawMap.set([i, -1], \"#\")\n      drawMap.set([i, map.height], \"#\")\n    }\n    for (let i = 0; i < map.height; i++) {\n      drawMap.set([-1, i], \"#\")\n      drawMap.set([map.width, i], \"#\")\n    }\n    drawMap.set([0, -1], \".\")\n    drawMap.set([map.width - 1, map.height], \".\")\n    drawMap = parseMap2d(drawMap.toString())\n\n    for (const { pos, value } of drawMap) {\n      const origPos = [pos[0] - 1, pos[1] - 1]\n      const blizzards = []\n      if (map.has(origPos)) {\n        if (checks.u(map, origPos, time)) blizzards.push(\"⇡\")\n        if (checks.d(map, origPos, time)) blizzards.push(\"⇣\")\n        if (checks.l(map, origPos, time)) blizzards.push(\"⇠\")\n        if (checks.r(map, origPos, time)) blizzards.push(\"⇢\")\n      }\n\n      if (blizzards.length > 0) {\n        blizzards.forEach((blizzard, i) =>\n          drawChar(pos, blizzard, colors.blizzard, i === 0),\n        )\n      } else if (value === \"#\") {\n        const isWallOnLeft = drawMap.get([pos[0] - 1, pos[1]]) === \"#\"\n        const isWallOnRight = drawMap.get([pos[0] + 1, pos[1]]) === \"#\"\n        const isWallOnTop = drawMap.get([pos[0], pos[1] - 1]) === \"#\"\n        const isWallOnBottom = drawMap.get([pos[0], pos[1] + 1]) === \"#\"\n\n        if (isWallOnRight && isWallOnBottom) {\n          drawSprite(pos, sprites.wallTL)\n        } else if (\n          (isWallOnLeft && isWallOnBottom) ||\n          (isWallOnLeft && !isWallOnRight)\n        ) {\n          drawSprite(pos, sprites.wallTR)\n        } else if (\n          (isWallOnRight && isWallOnTop) ||\n          (isWallOnRight && !isWallOnLeft)\n        ) {\n          drawSprite(pos, sprites.wallBL)\n        } else if (isWallOnLeft && isWallOnTop) {\n          drawSprite(pos, sprites.wallBR)\n        } else if (isWallOnRight || isWallOnLeft) {\n          drawSprite(pos, sprites.wallH)\n        } else {\n          drawSprite(pos, sprites.wallV)\n        }\n      } else {\n        drawSprite(pos, sprites.grass)\n      }\n    }\n    console.log({ playerPos })\n    drawElf([playerPos[0] + 1, playerPos[1] + 1])\n    drawElf2([drawMap.width - 2, drawMap.height - 1])\n  }\n\n  function setButtonsState() {\n    const canMove = {\n      up:\n        V.eq([playerPos[0], playerPos[1] - 1], [0, -1]) ||\n        map.has([playerPos[0], playerPos[1] - 1]),\n      down:\n        V.eq([playerPos[0], playerPos[1] + 1], [map.width - 1, map.height]) ||\n        map.has([playerPos[0], playerPos[1] + 1]),\n      left: map.has([playerPos[0] - 1, playerPos[1]]),\n      right: map.has([playerPos[0] + 1, playerPos[1]]),\n      stay: true,\n    }\n    for (const button of controls.children) {\n      button.disabled = lost || won || !canMove[button.name]\n    }\n  }\n\n  function drawLoseScreen() {\n    ctx.fillStyle = colors.bg\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n    const message = \"You lost!\"\n    for (let i = 0; i < message.length; i++) {\n      drawChar([i, 1], message[i], \"red\")\n    }\n  }\n\n  function drawWinScreen() {\n    ctx.fillStyle = colors.bg\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n    const message = \"You won!\"\n    for (let i = 0; i < message.length; i++) {\n      drawChar([i, 1], message[i], \"green\")\n    }\n  }\n\n  function handleMove(direction) {\n    time++\n    if (direction === \"up\") {\n      playerPos[1]--\n    } else if (direction === \"down\") {\n      playerPos[1]++\n    } else if (direction === \"left\") {\n      playerPos[0]--\n    } else if (direction === \"right\") {\n      playerPos[0]++\n    }\n    drawLevel(map, time)\n    setButtonsState()\n    if (V.eq(playerPos, [map.width - 1, map.height])) {\n      won = true\n      drawWinScreen()\n    } else if (\n      checks.u(map, playerPos, time) ||\n      checks.d(map, playerPos, time) ||\n      checks.l(map, playerPos, time) ||\n      checks.r(map, playerPos, time)\n    ) {\n      lost = true\n      drawLoseScreen()\n    }\n  }\n\n  controls.onclick = function (e) {\n    handleMove(e.target.name)\n  }\n}\n","// @ts-check\n\nimport { V } from \"../modules/index.js\"\nimport { mod, readLines } from \"../modules/lib.js\"\nimport { Map2d, parseMap2d } from \"../modules/map2d.js\"\n\nexport const useExample = false\n\nexport const exampleInput = `\\\n#.######\n#>>.<^<#\n#.<..<<#\n#>v.><>#\n#<^v^^>#\n######.#`\n\n/** @typedef {ReturnType<typeof parseInput>} InputType */\n\nexport const parseInput = (/** @type {string} */ input) => {\n  /** @type {Map2d<string>} */\n  const resultMap = new Map2d()\n  const lines = readLines(input)\n  for (let y = 1; y < lines.length - 1; y++) {\n    for (let x = 1; x < lines[y].length - 1; x++) {\n      resultMap.set(V.vec(x - 1, y - 1), lines[y][x])\n    }\n  }\n  return resultMap\n}\n\n/**\n *\n * @param {Map2d<string>} map\n * @param {V.Vec2} pos\n * @param {number} time\n * @returns\n */\nfunction isBlizzard(map, pos, time) {\n  return (\n    checks.u(map, pos, time) ||\n    checks.d(map, pos, time) ||\n    checks.l(map, pos, time) ||\n    checks.r(map, pos, time)\n  )\n}\n\n/** @type {Record<\"u\" | \"d\" | \"l\" |\"r\", (map: Map2d<string>, pos: V.Vec2, time: number) => boolean>} */\nexport const checks = {\n  u: (map, [x, y], time) => map.get([x, mod(y + time, map.height)]) === \"^\",\n  d: (map, [x, y], time) => map.get([x, mod(y - time, map.height)]) === \"v\",\n  l: (map, [x, y], time) => map.get([mod(x + time, map.width), y]) === \"<\",\n  r: (map, [x, y], time) => map.get([mod(x - time, map.width), y]) === \">\",\n}\n\n/**\n *\n * @param {Map2d<string>} map\n * @param {V.Vec2 | null} me\n * @param {number} time\n */\nexport function prepareMapForDraw(map, me, time) {\n  const drawMap = new Map2d()\n\n  for (const { pos } of map) {\n    const blizzards = []\n    if (checks.u(map, pos, time)) blizzards.push(\"^\")\n    if (checks.d(map, pos, time)) blizzards.push(\"v\")\n    if (checks.l(map, pos, time)) blizzards.push(\"<\")\n    if (checks.r(map, pos, time)) blizzards.push(\">\")\n    if (blizzards.length > 0) {\n      drawMap.set(pos, blizzards.length === 1 ? blizzards[0] : blizzards.length)\n    }\n  }\n  for (let i = -1; i <= map.width; i++) {\n    drawMap.set([i, -1], \"#\")\n    drawMap.set([i, map.height], \"#\")\n  }\n  for (let i = 0; i < map.height; i++) {\n    drawMap.set([-1, i], \"#\")\n    drawMap.set([map.width, i], \"#\")\n  }\n  drawMap.set([0, -1], \".\")\n  drawMap.set([map.width - 1, map.height], \".\")\n  if (me) drawMap.set(me, \"E\")\n  return parseMap2d(drawMap.toString())\n}\n\n/** @typedef {[V.Vec2, number, BfsStep | null]} BfsStep */\n\n/**\n * @param {BfsStep} step\n */\nfunction toArray(step) {\n  const result = []\n  while (step) {\n    result.push(step)\n    step = step[2]\n  }\n  return result.reverse()\n}\n\n/**\n * @param {Map2d<string>} map\n * @param {V.Vec2} start\n * @param {V.Vec2} end\n * @param {V.Vec2} pos\n * @param {number} t\n * @returns {V.Vec2[]}\n */\nexport function getAvailablePositions(map, start, end, pos, t) {\n  return [...V.DIRS_4, V.ZERO]\n    .map((d) => V.add(pos, d))\n    .filter((n) => {\n      return (\n        !isBlizzard(map, n, t + 1) &&\n        (V.eq(n, start) || V.eq(n, end) || map.has(n))\n      )\n    })\n}\n\n/**\n *\n * @param {InputType} map\n * @param {V.Vec2} start\n * @param {V.Vec2} end\n * @param {number} startTime\n * @returns\n */\nfunction solve(map, start, end, startTime) {\n  while (isBlizzard(map, start, startTime)) startTime++\n\n  /**\n   * @param {V.Vec2} start\n   * @param {V.Vec2} end\n   * @param {number} startTime\n   *\n   * @returns {BfsStep | null}\n   */\n  function bfs(start, end, startTime) {\n    /** @type {Array<BfsStep>} */\n    const queue = [[start, startTime, null]]\n    const visited = new Set()\n\n    while (queue.length > 0) {\n      const cur = queue.shift()\n      const [pos, t] = cur\n      if (V.eq(pos, end)) return cur\n\n      const key = pos.toString() + \":\" + t\n      if (visited.has(key)) continue\n      else visited.add(key)\n\n      for (const next of getAvailablePositions(map, start, end, pos, t)) {\n        queue.push([next, t + 1, cur])\n      }\n    }\n\n    throw new Error(\"No path found\")\n  }\n\n  const result = bfs(start, end, startTime)\n  // toArray(result).forEach((pos, i) => {\n  //   drawMap(map, pos[0], i + startTime)\n  // })\n  return result[1]\n}\n\n/**\n * @param {InputType} input\n */\nexport function part1(input) {\n  const start = V.vec(0, -1)\n  const end = V.vec(input.width - 1, input.height)\n  return solve(input, start, end, 0)\n}\n\n/**\n * @param {InputType} input\n */\nexport function part2(input) {\n  const start = V.vec(0, -1)\n  const end = V.vec(input.width - 1, input.height)\n  const first = solve(input, start, end, 0)\n  const second = solve(input, end, start, first)\n  const third = solve(input, start, end, second)\n  return third\n}\n","module.exports = new __parcel__URL__(\"../\" + require('./helpers/bundle-manifest').resolve(\"2dmi2\")).toString();","module.exports = new __parcel__URL__(\"../\" + require('./helpers/bundle-manifest').resolve(\"gGxKH\")).toString();","module.exports = new __parcel__URL__(\"../\" + require('./helpers/bundle-manifest').resolve(\"8i50T\")).toString();","module.exports = new __parcel__URL__(\"../\" + require('./helpers/bundle-manifest').resolve(\"iPk1y\")).toString();","module.exports = new __parcel__URL__(\"../\" + require('./helpers/bundle-manifest').resolve(\"a1aok\")).toString();","module.exports = new __parcel__URL__(\"../\" + require('./helpers/bundle-manifest').resolve(\"390yF\")).toString();","module.exports = new __parcel__URL__(\"../\" + require('./helpers/bundle-manifest').resolve(\"jrZHa\")).toString();"],"names":["$3ece94fe9f768145$export$6503ec6e8aabbaf","$3ece94fe9f768145$export$f7ad0328861e2f03","$3ece94fe9f768145$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$7zFg5","$idVGl","$30e6b530f34a47e9$export$20bebb8aee8dd3f5","input","resultMap","$jOfNW","Map2d","lines","$1CMLe","readLines","y","x","set","V","vec","$30e6b530f34a47e9$export$ea3f7679f8e99d0","u","map","time","get","mod","height","d","l","width","r","$af65021eb08c64c4$exports","URL","resolve","import","meta","url","toString","$0153c87d3ae7b077$exports","$6261212292e3080c$exports","$6c915fbb4084faeb$exports","$fbaff03458da4e2b$exports","$289a05e3543c1325$exports","$3bb6f8d7a0ccdda0$exports","$2a7a04ce5b23d3b8$var$canvas","document","getElementById","$2a7a04ce5b23d3b8$var$ctx","getContext","$2a7a04ce5b23d3b8$var$form","value","$2a7a04ce5b23d3b8$var$controls","querySelector","addEventListener","e","preventDefault","async","level","$2a7a04ce5b23d3b8$var$tileSize","$2a7a04ce5b23d3b8$var$padding","screenWidth","window","innerWidth","maxScale","Math","max","min","floor","console","log","$2a7a04ce5b23d3b8$var$scale","scaleCanvasToPixelRatio","fillStyle","$2a7a04ce5b23d3b8$var$colors","fillRect","translate","message","timePassed","Date","now","$2a7a04ce5b23d3b8$var$drawChar","sprites","Promise","all","$2a7a04ce5b23d3b8$var$loadSprite","$parcel$interopDefault","grass","wallV","wallH","wallTL","wallTR","wallBL","wallBR","$2a7a04ce5b23d3b8$var$loadSprites","ms","setTimeout","playerPos","lost","won","drawLevel","drawMap","i1","parseMap2d","pos","origPos","blizzards","has","push","forEach","blizzard","isWallOnLeft","isWallOnRight","isWallOnTop","isWallOnBottom","$2a7a04ce5b23d3b8$var$drawSprite","$2a7a04ce5b23d3b8$var$drawElf2","setButtonsState","canMove","up","eq","down","left","right","stay","button","children","disabled","name","drawLoseScreen","drawWinScreen","handleMove","direction","onclick","target","$2a7a04ce5b23d3b8$var$startLevel","FormData","this","trim","char","color","clear","font","textAlign","textBaseline","size","fillText","sprite","imageSmoothingEnabled","drawImage","path","reject","img","Image","onload","onerror","src"],"version":3,"file":"index.efec2b1c.js.map"}